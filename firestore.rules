rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // User Profiles - public read, only owner can write
    match /userProfiles/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // User Predictions - only owner can read/write
    match /userPredictions/{predictionId} {
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null &&
        resource.data.userId == request.auth.uid;
    }

    // Users can only access their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User preferences and settings
    match /userPreferences/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Favorite teams and players - user-specific
    match /favorites/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Public read-only data for matches, teams, players, tournaments
    match /matches/{matchId} {
      allow read: if true;
      allow write: if false; // Only backend can write match data
    }
    
    match /teams/{teamId} {
      allow read: if true;
      allow write: if false; // Only backend can write team data
    }
    
    match /players/{playerId} {
      allow read: if true;
      allow write: if false; // Only backend can write player data
    }
    
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow write: if false; // Only backend can write tournament data
    }
    
    // Chat messages - authenticated users can read and write
    match /chatMessages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        validateChatMessage(request.resource.data);
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Notifications - user-specific
    match /notifications/{userId}/messages/{messageId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Analytics and performance data - authenticated users only
    match /analytics/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Only backend can write analytics
    }
    
    // Helper functions
    function validateChatMessage(data) {
      return data.keys().hasAll(['message', 'timestamp', 'userId']) &&
             data.message is string &&
             data.message.size() <= 1000 &&
             data.timestamp is timestamp &&
             data.userId is string;
    }
  }
}
